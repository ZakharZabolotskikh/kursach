import unittest
from authenticator import Authenticator
from file_manager import FileManager
from server_connection import ServerConnection
from vector import Vector

class TestAuthenticator(unittest.TestCase):

    def test_salt_length(self):
        auth = Authenticator("user", "password")
        salt = auth.compute_salt()
        self.assertEqual(len(salt), 16)

    def test_hash_consistent_length(self):
        auth = Authenticator("user", "password")
        salt = auth.compute_salt()
        hash_value = auth.generate_hash(salt)
        self.assertEqual(len(hash_value), 64)

    def test_different_salts_produce_different_hashes(self):
        auth = Authenticator("user", "password")
        salt1 = auth.compute_salt()
        salt2 = auth.compute_salt()
        hash1 = auth.generate_hash(salt1)
        hash2 = auth.generate_hash(salt2)
        self.assertNotEqual(hash1, hash2)


class TestFileManager(unittest.TestCase):

    def test_write_read_vectors(self):
        temp_filename = "vectors.bin"
        FileManager.write_results(temp_filename, [1, 2, 3])
        results = FileManager.read_vectors(temp_filename)
        self.assertEqual(results, [1, 2, 3])

    def test_handle_empty_vectors(self):
        temp_filename = "empty_vectors.bin"
        FileManager.write_results(temp_filename, [])
        results = FileManager.read_vectors(temp_filename)
        self.assertEqual(results, [])

    def test_read_write_large_vectors(self):
        temp_filename = "large_vectors.bin"
        FileManager.write_results(temp_filename, [42] * 1000)
        results = FileManager.read_vectors(temp_filename)
        self.assertEqual(results, [42] * 1000)

    def test_exception_for_invalid_file(self):
        with self.assertRaises(RuntimeError):
            FileManager.read_vectors("nonexistent_file.bin")


class TestServerConnection(unittest.TestCase):

    def test_initialization(self):
        server = ServerConnection("127.0.0.1", 8080)
        self.assertTrue(server.connect())
        server.close()

    def test_send_vectors_empty(self):
        server = ServerConnection("127.0.0.1", 8080)
        server.connect()
        empty_vectors = []
        self.assertTrue(server.send_vectors(empty_vectors))
        server.close()

    def test_graceful_close(self):
        server = ServerConnection("127.0.0.1", 8080)
        server.connect()
        self.assertTrue(server.close())

    def test_exception_for_invalid_ip(self):
        server = ServerConnection("256.256.256.256", 8080)
        with self.assertRaises(RuntimeError):
            server.connect()


class TestVector(unittest.TestCase):

    def test_vector_initialization(self):
        values = [10, 20, 30]
        vec = Vector(3, values)
        self.assertEqual(vec.size, 3)
        self.assertEqual(vec.values, values)

    def test_empty_vector(self):
        vec = Vector(0, [])
        self.assertEqual(vec.size, 0)
        self.assertEqual(vec.values, [])


class TestAuthenticatorEmptyCredentials(unittest.TestCase):

    def test_empty_credentials(self):
        auth = Authenticator("", "")
        with self.assertRaises(RuntimeError):
            auth.authenticate(0)  # Mocking on the server is required


if __name__ == '__main__':
    unittest.main()
